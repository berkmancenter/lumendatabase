## Create notice

Submits a new Notice to the chillingeffects system via JSON-encoded parameters.
Authentication is not required for now. There are several different "Notice
Types," these are essentially subclasses of the abstract Notice class.  "Notice
Types" allow us to track notice-specific attributes and create serialized
representations with logical attribute names. Please see **Notice Type Mapping**
below, which defines what attributes are remapped for each Notice Type.

**Method**: `POST`

**Endpoint**: `http://flutie.law.harvard.edu:8000/notices`

### Request

| Field                  | Type   | Description
| ---                    | ---    | ---
| `notice`               | Notice | Required
| `authentication_token` | string | See Authentication Section

**Notice**

| Field                              | Type               | Description
| ---                                | ---                | ---
| `title`                            | string             | Required
| `type`                             | string             | Required: one of 'CourtOrder', 'Dmca', 'LawEnforcementRequest', 'Other', 'PrivateInformation', or 'Trademark'
| `subject`                          | string             |
| `date_sent`                        | string             | Any parseable time value, e.g. "2013-05-21", "2013-05-21 10:01:01 -04:00"
| `date_received`                    | string             | Any parseable time value, e.g. "2013-05-21", "2013-05-21 10:01:01 -04:00"
| `source`                           | string             | How did you receive this notice - mail? online form?
| `category_ids`                     | [int]              | An array of integers representing `category_ids` - See **Request a list of Categories** below.
| `tag_list`                         | string             | Comma separated tags, spaces are OK. Automatically lowercased.
| `regulation_list`                  | string             | Comma separated regulations / laws relevant to this notice, spaces are OK. Automatically lowercased. Only available for CourtOrder, and LawEnforcementRequest notice types.
| `jurisidiction_list`               | string             | Comma separated list of jurisdictions, spaces are OK.
| `action_taken`                     | string             | One of 'Yes', 'No', or 'Partial'. Defaults to 'No' if unspecified.
| `works_attributes`                 | [Work]             | A list of Works
| `entity_notice_roles_attributes`   | [EntityNoticeRole] | A list of EntityNoticeRoles
| `file_uploads_attributes`          | [FileUpload]       | A list of FileUploads

**Work**

| Field                            | Type              | Description
| ---                              | ---               | ---
| `copyrighted_urls_attributes`    | [CopyrightedUrl]  | List of urls that represent the original work.
| `kind`                           | string            | Book, movie, video, etc.
| `description`                    | string            | Description of the work, which may include the copyright holder information
| `infringing_urls_attributes`     | [InfringingUrl]   | List of urls which infringe on the work

**CopyrightedURL**

| Field          | Type     | Description
| ---            | ---      | ---
| `url`          | string   | A Url that represents the original work.

**InfringingUrl**

| Field          | Type     | Description
| ---            | ---      | ---
| `url`          | string   | A Url that infringes upon the Work

**EntityNoticeRole**

| Field                | Type    | Description
| ---                  | ---     | ---
| `name`               | string  | The name of the role, one of "principal", "agent", "recipient", "sender", "target", "issuing_court", "plaintiff", or "defendant". "recipient" and "sender" are displayed for all Notice Types on the ChillingEffects website after automatic redaction.
| `entity_id`          | integer | (Optional) The ID of an existing entity. You should not specify the `entity_attributes` values below if you include `entity_id` here.
| `entity_attributes`  | Entity  | A new entity that has this role on this notice. If you specify `entity_attributes`, you should not specify an `entity_id`

*Note*: If not explicitly provided, Submitter and Recipient entities 
will be assigned based on the user performing the submission (as 
identified by the authentication token used).

**Entity**

| Field             | Type   | Description
| ---               | ---    | ---
| `name`            | string | Required
| `kind`            | string | one of "organization" or "individual"
| `address_line_1`  | string |
| `address_line_2`  | string |
| `city`            | string |
| `state`           | string |
| `country_code`    | string | A two-digit ISO country code
| `phone`           | string |
| `email`           | string |
| `url`             | string |

**FileUpload**

| Field             | Type   | Description
| ---               | ---    | ---
| `kind`            | string | One of "original" or "supporting"
| `file`            | string | A base64 encoded [data-uri](http://en.wikipedia.org/wiki/Data_URI_scheme) representing the file attachment
| `file_name`       | string | A name for this file. data-uris have no concept of a file name, so you must supply one yourself. If not supplied, the filename will be "base64.txt"

### Authentication

Submissions through the API **must** be authenticated by including an 
Authentication Token. Tokens will be provided by Chilling Effects upon 
request.

The Token may be included as a parameter or header.

* Parameter: `authentication_token`

```
curl -H "Accept: application/json" \
     -H "Content-type: application/json" \
     -d '{ "authentication_token": "abc123", "notice": {...} }' \
     'http://flutie.law.harvard.edu:8000/notices/'
```

* Request Header: `AUTHENTICATION_TOKEN`

```
curl -H "Accept: application/json" \
     -H "Content-type: application/json" \
     -H "AUTHENTICATION_TOKEN: abc123" \
     -d '{ "notice": {...} }' \
     'http://flutie.law.harvard.edu:8000/notices/'
```

If the Authentication Token is missing or invalid, an empty response 
will be returned with HTTP status 401 (Unauthorized).

### Example Request

```
curl -H "Accept: application/json" -H "Content-type: application/json" 'http://flutie.law.harvard.edu:8000/notices/' -d '{
  "authentication_token": "abc123",
  "notice": {
    "title": "DMCA (Copyright) Complaint to Google",
    "type": "Dmca",
    "subject": "Infringement Notfication via Blogger Complaint",
    "date_sent": "2013-05-22",
    "date_received": "2013-05-23",
    "source": "Online form",
    "category_ids": [19, 27],
    "tag_list": "movies, disney, youtube",
    "jurisidiction_list": "US, CA",
    "action_taken": "Partial",
    "file_uploads_attributes": [
      {
        "kind": "original",
        "file": "data:text/plain;base64,dGVzdA==",
        "file_name": "original_file.txt"
      },
      {
        "kind": "supporting",
        "file": "data:text/plain;base64,QmUgc3VyZSB0byBkcmluayB5b3VyIG92YWx0aW5l\n",
        "file_name": "supporting_file.txt"
      },
    ],
    "works_attributes": [
      {
        "description": "Lion King Video",
        "copyrighted_urls_attributes": [
          { "url": "http://disney.com/lion_king.mp4" },
          { "url": "http://disney.com/lion_king.mov" }
        ],
        "infringing_urls_attributes": [
          { "url": "http://youtube.com/bad_url_1" },
          { "url": "http://youtube.com/bad_url_2" },
          { "url": "http://youtube.com/bad_url_3" },
          { "url": "http://youtube.com/bad_url_4" },
          { "url": "http://youtube.com/bad_url_5" }
        ]
      }
    ],
    "entity_notice_roles_attributes": [
      {
        "name": "recipient",
        "entity_attributes": {
          "name": "Google",
          "kind": "organization",
          "address_line_1": "1600 Amphitheatre Parkway",
          "city": "Mountain View",
          "state": "CA", 
          "zip": "94043",
          "country_code": "US"
        }
      },
      {
        "name": "sender",
        "entity_attributes": {
          "name": "Joe Lawyer",
          "kind": "individual",
          "address_line_1": "1234 Anystreet St.",
          "city": "Anytown",
          "state": "CA",
          "zip": "94044",
          "country_code": "US"
        }
      }
    ]
  }
}'
```

### Successful Responses

Successful responses will have HTTP status 201 (Created) and include a
`Location:` HTTP header with the location of the created object.

#### Example:

**Note:** Unimportant headers have been removed.

```
> curl -H "Accept: application/json" -H "Content-type: application/json" 'http://flutie.law.harvard.edu:8000/notices/' -d @tmp/curl.json --dump-header - 
HTTP/1.1 201 Created 
Location: http://localhost:3000/notices/4
Content-Type: application/json; charset=utf-8
Cache-Control: max-age=0, private, must-revalidate
Date: Wed, 05 Jun 2013 20:43:34 GMT
Content-Length: 1
```

### Unsuccessful responses

Unsuccessful responses will have HTTP status 422 (Unprocessable Entity) and
include a JSON response enumerating the validation failures.

#### Example:

```
{
  "works":["can't be blank"],
  "entity_notice_roles":["can't be blank"],
  "title":["can't be blank"]
}
```

## Notice Type Mapping

**THIS SECTION IS A WORK IN PROGRESS**

All notices are added to the system through the API using the same named
parameters (see **Create Notice** above). However, fields are "mapped"
depending on the Notice Type when serialized as JSON through a search request
or when requested individually.

### Mappings

#### Court Order

| Ingestion Field Name       | Mapped Field Name              | Removed?
| ---                        | ---                            | ---
| `body`                     | `explanation`                  |
| `works.description`        | `works.subject_of_court_order` |
| `works.infringing_urls`    | `works.targetted_urls`         |
| `works.copyrighted_urls`   |                                | Yes, not relevant to this type

#### Dmca

Attributes remain unchanged from ingestion.

#### LawEnforcementRequest

| Ingestion Field Name       | Mapped Field Name                        | Removed?
| ---                        | ---                                      | ---
| `body`                     | `explanation`                            |
| `works.description`        | `works.subject_of_enforcement_request`   |
| `works.infringing_urls`    | `works.urls_in_request`                  |
| `works.copyrighted_urls`   | `works.original_work_urls`               |
| `regulation_list`          | `regulations`                            |

#### Other

| Ingestion Field Name       | Mapped Field Name              | Removed?
| ---                        | ---                            | ---
| `body`                     | `explanation`                  |
| `works.description`        | `works.complaint`              |
| `works.infringing_urls`    | `works.problematic_urls`       |
| `works.copyrighted_urls`   | `works.original_work_urls`     |

#### PrivateInformation

| Ingestion Field Name       | Mapped Field Name                            | Removed?
| ---                        | ---                                          | ---
| `body`                     | `explanation`                                |
| `works.description`        | `works.complaint`                            |
| `works.infringing_urls`    | `works.urls_with_private_information`        |
| `works.copyrighted_urls`   | `works.original_work_urls`                   |

#### Trademark

| Ingestion Field Name       | Mapped Field Name   | Removed?
| ---                        | ---                 | ---
| `works.description`        | `marks`             |
| `works.infringing_urls`    |                     | Yes
| `works.copyrighted_urls`   |                     | Yes

## Request a notice

**Method**: `GET`

**Endpoint**: `http://flutie.law.harvard.edu:8000/notices/<notice id>.json`


#### Example Request:

```
curl http://flutie.law.harvard.edu:8000/notices/1.json
```

### Successful Responses

Return a JSON-encoded representation of selected notice attributes.  **Notice
Types** will have mapped attributes applied, and be under a root key
articulating their type.

#### Example Successful Response:

```
{
  "dmca":{
    "id":1,
    "title":"Lion King on YouTube",
    "body":null,
    "date_sent":"2013-06-04T19:23:12Z",
    "date_received":"2013-06-05T20:31:44Z",
    "categories":[
      "Anticircumvention (DMCA)",
      "Bookmarks",
      "Chilling Effects"
    ],
    "tags": [
      "tag_1",
      "tag_2"
    ],
    "jurisdictions": [
      "US",
      "CA"
    ],
    "action_taken": "Partial",
    "sender_name": "Joe Lawyer",
    "recipient_name": "Google, Inc.",
    "works": [
      {
        "description": "Lion King Video",
        "copyrighted_urls": [
          { "url": "http://www.example.com/lion_king.mp4" },
          { "url": "http://www.example.com/lion_king.mov" }
        ],
        "infringing_urls": [
          { "url": "http://www.example.com/infringing1" },
          { "url": "http://www.example.com/infringing2" },
          { "url": "http://www.example.com/infringing3" }
        ]
      }
    ]
  }
}
```

### Unsuccessful Responses

Return a 404 HTTP status header.

## Request a list of Categories

**Method**: GET

**Endpoint**: `http://flutie.law.harvard.edu:8000/categories.json`

```
curl http://flutie.law.harvard.edu:8000/categories.json
```

### Successful Responses

Return a JSON-encoded array of categories, including the following attributes:

| Field      | Type       | Description
| ---        | ---        | ---
| `id`       | Integer    | The unique ID used for the `category_ids` array during notice creation.
| `name`     | String     | The category name
| `parent_id`| Integer    | The parent `category_id` of this category, or "null" if this is a root category.

#### Example Successful Response:

```
{
  "categories": [
    {
      "id": 1,
      "name": "Chilling Effects",
      "parent_id": null
    },
    {
      "id": 2,
      "name": "Copyright",
      "parent_id": null
    },
    {
      "id": 3,
      "name": "Anticircumvention (DMCA)",
      "parent_id": 2
    }
  ]
}
```

### Unsuccessful Responses

Undefined.

## Search notices via fulltext

Chillingeffects allows for paginatable full-text searches of notices and
relevant metadata. Results are sorted with the most relevant at the top. Notice
search results contain the same data as an individually-requested Notice, with
an additional "score" field. "score" articulates how "relevant" this result is
to the query term. Higher numbers are more relevant.

Terms are joined with an 'AND' by default.

**Method**: `GET`

**Endpoint**: `http://flutie.law.harvard.edu:8000/notices/search?term=url_escaped_query&sender_name=Joe%20Smith&page=1`

**Parameters**

| Parameters              | Description
| ---                     | ---
| `term`                  | The full-text query term
| `title`                 | Search in the `title` field
| `categories`            | Search within a notice's categories
| `tags`                  | Search within a notice's tags
| `jurisdictions`         | Search within a notice's jurisdictions
| `sender_name`           | Search in the sender's name
| `recipient_name`        | Search in the recipient's name
| `works`                 | Search within a work's description
| `action_taken`          | Search based on the action taken on a notice.
| `sender_name_facet`     | Filter on `sender_name` facet
| `recipient_name_facet`  | Filter on `recipient_name` facet
| `category_facet`        | Filter on categories facet
| `date_received_facet`   | The date range (in microseconds since the unix epoc) separated by ".."
| `tag_list_facet`        | Filter on a tag
| `country_code_facet`    | Filter on the recipient's country code
| `language_facet`        | Filter on the notice language code
| `page`                  | The page you're requesting - defaults to the first page of results.
| `per_page`              | The number of results per page. Defaults to 10.
| `sort_by`               | One of `date_received asc`, `date_received desc`, `relevancy asc`, or `relevancy desc`. Defaults to `relevancy asc`.

See below for more information about available facets. You can get an idea of
how facets are formatted by submitting facet-less fulltext queries and then
inspecting the **Facets** metadata returned by the search.

### Successful Responses

Return a JSON-encoded hash including an array of notices and metadata about the
search results.

| Field       | Type       | Description
| ---         | ---        | ---
| `notices`   | Array      | An array of Notices encoded as JSON data structures.
| `meta`      | Hash       | Search Metadata about the results of the search. See **Search Metadata**.

**Search Metadata**

| Field           | Type      | Description
| ---             | ---       | ---
| `query`         | Query     | The search query meta information. See **Query** below.
| `facets`        | Facet     | How the result set "falls" into metadata facets. See **Facets**
| `current_page`  | Integer   | The page number of the current set of results.
| `next_page`     | Integer   | The page number of the next set of results, or `null` if this is the last page.
| `offset`        | Integer   | How many total results in the result set before the current list of results.
| `per_page`      | Integer   | Number of results per page
| `previous_page` | Integer   | The page number of the previous set of results, or `null` if this is the first page.
| `total_entries` | Integer   | The total number of results for the search query.
| `total_pages`   | Integer   | The total number of pages in this result set.

**Query**

| Field                   | Type      | Description
| ---                     | ---       | ---
| `term`                  | String    | The full-text search term
| `sender_name_facet`     | String    | The `sender_name` value if this facet was submitted in this search.
| `recipient_name_facet`  | String    | The `recipient_name` value if this facet was submitted in this search.
| `category_facet`        | String    | The `category` value if this facet was submitted in this search.
| `date_received_facet`   | String    | The date range used (in microseconds since the unix epoc) separated by ".."
| `tag_list_facet`        | String    | The `tag_list` value if this facet was submitted in this search.
| `country_code_facet`    | String    | The `country_code` value if this facet was submitted in this search.
| `language_facet`        | String    | The `language` value if this facet was submitted in this search.

**Facet**

Facets aggregate documents along specific metadata. [See the elasticsearch
documentation for more information on
facets](http://www.elasticsearch.org/guide/reference/api/search/facets/).

Currently we're using [terms](http://www.elasticsearch.org/guide/reference/api/search/facets/terms-facet/) and [range](http://www.elasticsearch.org/guide/reference/api/search/facets/range-facet/) facets.

| Facet                     | Facet Type | Description
| ---                       | ---        | ---
| `sender_name_facet`       | Terms      | The top 10 `sender_names` in this result set.
| `recipient_name_facet`    | Terms      | The top 10 `recipient_names` in this result set.
| `category_facet`          | Terms      | The top 10 `categories` in this result set.
| `tag_list_facet`          | Terms      | The top 10 `tags` in this result set.
| `country_code_facet`      | Terms      | The top 10 `country_codes` in this result set.
| `language_facet`          | Terms      | The top 10 `languages` in this result set.
| `date_received`           | Range      | The available date range facets.

**Terms Facet**

Only the most relevant metadata is described below. See the elasticsearch
documentation for more information. We only return the 10 most populous facets.

| Field           | Type     | Description
| ---             | ---      | ---
| `total`         | Integer  | The total number of results that can be faceted on this term and query.
| `other`         | Integer  | The number of results not included in the facets returned.
| `terms`         | Array    | An array including the term and count of items that are in that term facet.

**Range Facet**

| Field           | Type     | Description
| ---             | ---      | ---
| `from`          | Integer  | The start of this facet, in unix epoc microseconds.
| `to`            | Integer  | The end of this facet, in unix epoc microseconds.
| `from_str`      | String   | A textual representation of the start of this facet.
| `to_str`        | String   | A textual representation of the end of this facet.
| `count`         | Integer  | The number of documents that fall in this facet.

### Example Successful Response

**Note:** Some facet information has been omitted to keep examples brief.

```
curl -H "Accept: application/json" -H "Content-type: application/json" 'http://flutie.law.harvard.edu:8000/notices/search?term=star'
```


```
{
  "notices": [
    {
      "id": "491",
      "type": "Dmca",
      "title": "Star Wars",
      "body": null,
      "date_received": null,
      "categories": [
        "Trademark",
        "DMCA Notices",
        "John Doe Anonymity"
      ],
      "sender_name": "Joe Lawyer",
      "recipient_name": "Google, Inc.",
      "tags": [
        "tag_1",
        "tag_2"
      ],
      "jurisdictions": [
        "US",
        "CA"
      ],
      "works": [
        {
          "description": "Lion King Video",
          "copyrighted_urls": [
            { "url": "http://www.example.com/lion_king.mp4" },
            { "url": "http://www.example.com/lion_king.mov" }
          ],
          "infringing_urls": [
            { "url": "http://www.example.com/infringing1" },
            { "url": "http://www.example.com/infringing2" },
            { "url": "http://www.example.com/infringing3" }
          ]
        }
      ],
      "score": 0.64636606
    }
  ],
  "meta": {
    "query": {
      "term": "star"
    },
    "facets": {
      "sender_name_facet": {
        "_type": "terms",
        "missing": 0,
        "total": 7,
        "other": 0,
        "terms": [
          {
            "term": "Steve Simpson",
            "count": 5
          },
          {
            "term": "Mike Itten",
            "count": 2
          }
        ]
      },
      "recipient_name_facet": {
        "_type": "terms",
        "missing": 0,
        "total": 7,
        "other": 0,
        "terms": [
          {
            "term": "Google",
            "count": 5
          },
          {
            "term": "Twitter",
            "count": 2
          }
        ]
      },
    },
    "current_page": 1,
    "next_page": null,
    "offset": 0,
    "per_page": 10,
    "previous_page": null,
    "total_entries": 1,
    "total_pages": 1
  }
}
```

### Example Unsuccessful Response


```
{
  "notices": [ ],
  "meta": {
    "query": {
      "term": "nonexistent"
    },
    "current_page": 1,
    "next_page": null,
    "offset": 0,
    "per_page": 10,
    "previous_page": null,
    "total_entries": 0,
    "total_pages": 0
  }
}
```

## Search for Entities via fulltext

Chillingeffects allows for paginatable full-text searches of Entities, useful
to select existing entities during notice creation. For information about
pagination metadata, please see 'Search notices via fulltext'

**Method**: `GET`

**Endpoint**: `http://flutie.law.harvard.edu:8000/entities/search?term=url_escaped_query&page=1`

**Parameters**

| Parameters        | Description
| ---               | ---
| `term`            | The full-text query term
| `page`            | The page you're requesting - defaults to the first page of results.
| `per_page`        | The number of results per page. Defaults to 10.


### Successful Responses

Return a JSON-encoded hash including an array of entities and metadata about
the search results.

| Field        | Type       | Description
| ---          | ---        | ---
| `entities`   | Array      | An array of Entities encoded as JSON data structures.
| `meta`       | Hash       | Search Metadata about the results of the search. See **Search Metadata**.

**Entity**

| Field             | Type               | Description
| ---               | ---                | ---
| `id`              | string             | The unique ID
| `parent_id`       | string             | The parent ID or "null" if this is a "root" entity.
| `name`            | string             | Full name
| `address_line_1`  | string             |
| `address_line_2`  | string             |
| `state`           | string             |
| `country_code`    | string             | Ideally, an ISO country code.
| `phone`           | string             |
| `email`           | string             |
| `url`             | string             |
| `city`            | string             |

### Successful Responses

Return a JSON-encoded representation of selected entity attributes.

#### Example Successful Response:

```
curl -H "Accept: application/json" -H "Content-type: application/json" 'http://flutie.law.harvard.edu:8000/entities/search?term=joe&page=1'
```


```
{
  "entities": [
    {
      "id": "6",
      "parent_id": null,
      "name": "Steve Simpson",
      "address_line_1": "23 My St.",
      "address_line_2": null,
      "state": "CA",
      "country_code": "US",
      "phone": null,
      "email": null,
      "url": null,
      "city": "Scranton"
    }
  ],
  "meta": {
    "query": {
      "term": "simpson"
    },
    "facets": null,
    "current_page": 1,
    "next_page": null,
    "offset": 0,
    "per_page": 10,
    "previous_page": null,
    "total_entries": 1,
    "total_pages": 1
  }
}
```

### Example Unsuccessful Response

```
{
  "entities": [ ],
  "meta": {
    "query": {
      "term": "nonexistent"
    },
    "facets": null,
    "current_page": 1,
    "next_page": null,
    "offset": 0,
    "per_page": 10,
    "previous_page": null,
    "total_entries": 0,
    "total_pages": 0
  }
}
```
